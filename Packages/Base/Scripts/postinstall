#!/bin/sh

# ***************************************************************************************
# PostFlight Script for MacPatch Client Installer
# ver 2.0.3
# Created By Charles Heizer
# LLNL
#
# ***************************************************************************************

MP_ROOT="/Library/MacPatch"
MP_ROOT_CLIENT="/Library/MacPatch/Client"

# Script Parent Dir Path
SRC=$(cd $(dirname "$0"); pwd)

# System Version Info
sysVersion=$(uname -r)
sysMajorVersion=${sysVersion%%.*}
tempMinorVersion=${sysVersion#*.}
sysMinorVersion=${tempMinorVersion%%.*}

# Current Logged in user info
cUsr="null"
if [ -e "${SRC}/ccusr" ]; then
	cUsr=`${SRC}/ccusr`
	echo "Current User is: $cUsr"
fi

# Script Functions
isIload () {
	pid=`ps -e | grep iLoadAssistant | grep -v grep | awk '{print $1}'`
	echo $pid
}

function setOwner {
	if [ -f "$1" ]; then
		/usr/sbin/chown -R root:wheel $1
	fi
}

function setOwnerAndPerms {
	if [ -f "$1" ]; then
		/usr/sbin/chown root:wheel $1
		/bin/chmod 0644 $1
	fi
}

# ******************************************************************
# Set owner & permissions
setOwnerAndPerms /Library/LaunchDaemons/gov.llnl.mp.agent.plist
setOwnerAndPerms /Library/LaunchDaemons/gov.llnl.mp.worker.plist
setOwnerAndPerms /Library/LaunchAgents/gov.llnl.mp.status.plist
setOwnerAndPerms /Library/LaunchAgents/gov.llnl.MPLoginAgent.plist
setOwner /Library/PrivilegedHelperTools/MPLoginAgent.app

if [ ! -d "/Library/Application Support/MPClientStatus" ]; then
	mkdir "/Library/Application Support/MPClientStatus"
fi
chmod +a 'everyone allow read,write,delete,add_file,file_inherit,directory_inherit' "/Library/Application Support/MPClientStatus"

# Define swuad plist vars
agentPrefs="/Library/Preferences/gov.llnl.mpagent"
agentPrefsPlist="/Library/Preferences/gov.llnl.mpagent.plist"

# ******************************************************************
# Migration data ...
#
if [ -f "/private/tmp/MPMigration/gov.llnl.mp.tasks.plist" ]; then
	"${SRC}/MPPrefMigrate" -F "/private/tmp/MPMigration/gov.llnl.mp.tasks.plist" -T "/Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist"
fi

# ******************************************************************
# Set Agent Plist data ...
#
if [ -e "${SRC}/gov.llnl.mpagent.plist" ]; then
	echo "Backup old plist file..."
	echo "Migrate settings from old plist to new"
	"${SRC}/mergePrefs.py" -b -i "${SRC}/gov.llnl.mpagent.plist" -t "${agentPrefsPlist}"
fi

# Copy in client version info
if [ -e "${SRC}/.mpVersion.plist" ]; then
	cp "${SRC}/.mpVersion.plist" "/Library/MacPatch/Client/.mpVersion.plist"
fi

# ******************************************************************
# Run Agent Components to populate DB with current info ************
#

if [ ! -d "/Library/MacPatch/Client/lib" ]; then
	mkdir -p "/Library/MacPatch/Client/lib"
	chmod 777 /Library/MacPatch/Client/lib
else
	chmod 777 /Library/MacPatch/Client/lib
fi

# ******************************************************************
# Get Server SSL Cert and trust it *********************************
#
SRVHOST=`/usr/bin/defaults read "${agentPrefs}" MPServerAddress`
SRVPORT=`/usr/bin/defaults read "${agentPrefs}" MPServerPort`
SRVSTR="$SRVHOST:443" 
CRTFILE="/Library/MacPatch/Client/lib/$SRVHOST.crt"

/usr/bin/openssl s_client -tls1 -connect $SRVSTR 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${CRTFILE}
/usr/bin/security add-trusted-cert -d -r trustAsRoot -k "/Library/Keychains/System.keychain" "${CRTFILE}" 

# ******************************************************************
# Add MacPatch Client Plugins if included **************************
#
if [ -d "${SRC}/Plugins" ]; then
	/usr/bin/find "${SRC}"/Plugins -name '*.bundle' -exec /bin/cp -r {} /Library/MacPatch/Client/lib/PlugIns/ \;
fi


# ******************************************************************
# Run Client Check-in

/Library/MacPatch/Client/MPAgent -c
sleep 1

# Get Server List
/Library/MacPatch/Client/MPAgent -n
sleep 1

# Get SU Server List
/Library/MacPatch/Client/MPAgent -z
sleep 1

# Run Client Inventory Scan
/Library/MacPatch/Client/MPAgent -t All
sleep 1

# If iLoadAssitant is not running, scan for patches, AV, and inventory
if [ -z "$(isIload)" ]; then

	# Run Client Vul Scan
	/Library/MacPatch/Client/MPAgentExec -s
	sleep 1
	
	# Run Client AV Scan
	/Library/MacPatch/Client/MPAgentExec -a
	sleep 1
else
	CNT=`/usr/libexec/PlistBuddy -c "Print mpTasks" /Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist | grep Dict | wc -l`
	#loop CNT
	NXTDAY=$(date -j -v+1d +"%Y-%m-%d")
	INT=0
	while [ $INT -lt $CNT ]; do 
		if [ `/usr/libexec/PlistBuddy -c "Print :mpTasks:$INT:cmd" /Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist` == "kMPVulScan" ]; then
			/usr/libexec/PlistBuddy -c "Set :mpTasks:$INT:startdate $NXTDAY" /Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist
		elif [ `/usr/libexec/PlistBuddy -c "Print :mpTasks:$INT:cmd" /Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist` == "kMPVulUpdate" ]; then
			/usr/libexec/PlistBuddy -c "Set :mpTasks:$INT:startdate $NXTDAY" /Library/MacPatch/Client/.tasks/gov.llnl.mp.tasks.plist
		fi
		INT=`expr $INT + 1`
	done
fi

# ******************************************************************
# Launch the MPAgent service ***************************************
#
/bin/launchctl load -w /Library/LaunchDaemons/gov.llnl.mp.agent.plist
/bin/sleep 2

# ******************************************************************
# Launch Worker		    ********************************************
# 
/bin/launchctl load -w /Library/LaunchDaemons/gov.llnl.mp.worker.plist
sleep 2

# Kill it , this ensures a new launch
kill $(ps ax | grep "MPWorker" | grep -v "grep" | awk '{print $1}')
sleep 3

# ******************************************************************
# Start LaunchAgent Apps *******************************************
#
# Note: On Mac OS X 10.6 and higher they have to stoped and started as 
# the current logged in user.
#

if [ "$cUsr" != "null" ]; then
	su -l $cUsr -c 'launchctl load -wF /Library/LaunchAgents/gov.llnl.mp.status.plist'
fi

/usr/bin/killall MPClientStatus

# Without this, may have a hard time upgrading 
pkgutil --forget gov.llnl.mp.agent.base
pkgutil --forget gov.llnl.macpatch.base

# ******************************************************************
# Symlink MPLogs dir to /L/Logs ************************************
#
if [ ! -e "/Library/Logs/MacPatch" ]; then
	ln -s /Library/MacPatch/Client/Logs /Library/Logs/MacPatch
fi

exit 0;