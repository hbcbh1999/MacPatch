'''
    def post(self,regKey):

        eng = engine()
        db = db_session(eng)
        mpConf = mpConfig()

        args = self.reqparse.parse_args()
        client_object = MpClientsRegistration()
        client_query_object = db.query(MpClientsRegistration).filter(MpClientsRegistration.cuuid == args['cuuid']).first()
        client_reg_wait = False

        #app.logger.info("POST: ClientRegistration")

        # Check If Client Is Allowed to Register
        if args['cuuid'] and regKey:

            reg_settings = db.query(MpClientsRegistrationSettings).first()
            if not reg_settings:
                reg_settings.autoreg == 1


            # Check if AutoReg is not enabled, check and verify if client can continue
            if reg_settings.autoreg == 0:
                # Auto Reg is not enabled ...
                if regKey == '0':
                    # Check to see if client is allowed
                    # check database to see if client has been approved
                    # look for cuuid and active record in mp_client_reg_keys
                    reg_key_info = db.query(MpClientRegKeys).filter(MpClientRegKeys.cuuid == args['cuuid'] and MpClientRegKeys.active == '1').first()
                    if not reg_key_info:
                        # Client has not been added to approved clients to register
                        #app.logger.info("Not Allowed ... 418")
                        return {"result": '', "errorno": 418, "errormsg": 'Not Allowed ...'}, 418
                # Validate Reg key
                else:
                    #app.logger.info("Else")
                    # Check see if valid
                    # find key and is active
                    # check if cuuid is equal or is client is set to any
                    # any = web admin defined a key for anyone to use, only once
                    reg_key_info = db.query(MpClientRegKeys).filter(MpClientRegKeys.regKey == regKey and MpClientRegKeys.active == '1').first()
                    if reg_key_info.cuuid == "any" or reg_key_info.cuuid == args['cuuid']:
                        # Its OK, debug only needed
                        #app.logger.debug("%s can register" % args['cuuid'])
                        print "Can Reg"
                    else:
                        # Not Valid key or client id
                        # Need to log this
                        # Add client to the mp_clients_wait_reg table

                        client_wait_object = MpClientsWantingRegistration()
                        setattr(client_wait_object, 'cuuid', args['cuuid'])
                        setattr(client_wait_object, 'hostname', args['hostname'])
                        setattr(client_wait_object, 'req_date', datetime.now())
                        db.add(client_wait_object)
                        db.commit()
                        engineClose(eng)
                        return {"result": '', "errorno": 418, "errormsg": 'Not Allowed ...'}, 418
            else:
                # AutoReg is allowed
                reg_key_info = None
        else:
            engineClose(eng)
            return {"result": '', "errorno": 418, "errormsg": 'Not Good ...'}, 418

        #
        # Registration authorization has passed
        # Can now register a client
        #

        # Verify Request Hash using keyword encrypted using server pub key
        # This verifies that the client has the correct key
        if args['authReq'] and args['authHash']:
            keyWord = None
            srvConf = mpConf['server']

            if srvConf['keys']['private']:
                keyWord = decrypt_rsa(srvConf['keys']['private'],args['authReq'])
                checkHash = keyWord + args['cuuid']

                #app.logger.debug("Incoming: %s" % args['authHash'])
                #app.logger.debug("Verify  : %s" % hashlib.sha1(checkHash).hexdigest())
                if args['authHash'] != hashlib.sha1(checkHash).hexdigest():
                    #app.logger.error("[%s][409]: Bad or missing data" % args['cuuid'])
                    return {"result": '', "errorno": 409, "errormsg": 'Bad or missing data.'}, 409
        else:
            #app.logger.error("[%s][418]: Not Good ..." % args['cuuid'])
            return {"result": '', "errorno": 418, "errormsg": 'Not Good ...'}, 418


        try:
            if client_query_object:
                # Update, don't support updates
                return {"result": '', "errorno": 0, "errormsg": ''}, 406

            else:
                # Add Client
                # Verify we have values for needed keys
                reqAttrs = ['hostname','client_pass_p12','client_pub_key','cuuid']
                for attr in reqAttrs:
                    if args[attr] == None:
                        return {"result": '', "errorno": 409, "errormsg": 'Bad or missing data.'}, 409

                # 1) Check CSR requirements
                # 2) Create Cert from CSR, return as base64 encoded
                client_cert = "NA"
                if args['client_csr'] != None:
                    if not ca.check_requirements():
                        print "Error did meet requirements"
                        return {"result": '', "errorno": 412, "errormsg": 'Missing server data.'}, 412

                    # "Create cert"
                    crtSerial, client_cert_b64 = ca.create_cert_from_csr(args['cuuid'],args['client_csr'])

                # Insert client reg data in database
                for col in client_object.columns:
                    if args[col]:
                        setattr(client_object, col, args[col])

                setattr(client_object, 'client_crt_serial', crtSerial)
                setattr(client_object, 'active', '1')
                setattr(client_object, 'reg_date', datetime.now())

                db.add(client_object)
                db.commit()

                # Check and remove wait object
                client_wait_object = db.query(MpClientsWantingRegistration).filter(MpClientsWantingRegistration.cuuid == args['cuuid']).first()
                if client_wait_object:
                    db.remove(client_wait_object)
                    db.commit()

                # Mark key as inactive
                if reg_key_info:
                    setattr(reg_key_info, 'active', '0')
                    db.merge(reg_key_info)
                    db.commit()

                engineClose(eng)
                return {"result": client_cert_b64, "errorno": 0, "errormsg": ''}, 201

        except IntegrityError, exc:
            db.rollback()
            engineClose(eng)
            #app.logger.error("%s" % exc.message)
            return {"error": exc.message}, 500

        engineClose(eng)
        return {"error": 'Should not have gotten here.'}, 403
        '''